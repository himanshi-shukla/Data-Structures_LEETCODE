/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[]}
 */
var rightSideView = function(root) {
    let arr = [];//create a queue to apply fisrt in first out , BFS --> level order
    function traverse( node, depth){
        if(!node) return; // if no tree, return from function
        if(!arr[depth]){ // if there is no depth, tree is at root level ie. first element , push that to queue
            arr[depth] = node.val;
        }
        traverse(node.right, depth +1);// traverse till the end, of right --> keep incrementing the depth
        traverse(node.left, depth +1); // same, pripritizing right for the right view as the queue will only hold one item , so everytime it stores only the right at every level
        
    }
    traverse(root,0);// call the function at root level
    return arr; // output the resultant queue with the right structure 
       
};

//     1
//  2 ---- 3
// 4--------- 5 

// 1--3--5